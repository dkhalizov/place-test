services:

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:3000"
    depends_on:
      - draw
      - auth
      - websocket
      - grid
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  auth:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: auth
    environment:
      - JWT_SECRET=secret
      - GOOGLE_CLIENT_ID=4569410916-mf7l68sh509mrlpu3ih7op7b6dgg4tqh.apps.googleusercontent.com
    ports:
      - "8081:8080"
    networks:
      - my_network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  draw:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: draw
    environment:
      - BIND_ADDRESS=0.0.0.0:5001
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_URL=kafka
      - KAFKA_PORT=29092
    ports:
      - "5001:8080"
    depends_on:
      - redis
      - kafka
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  grid:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: grid
    environment:
      - BIND_ADDRESS=0.0.0.0:8083
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - GIN_MODE=release
      - KAFKA_URL=kafka
      - KAFKA_PORT=29092
    ports:
      - "8083:8083"
    depends_on:
      - redis
      - kafka
      - websocket
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  websocket:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: ws
    environment:
      - BIND_ADDRESS=0.0.0.0:8082
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - GIN_MODE=release
      - KAFKA_URL=kafka
      - KAFKA_PORT=29092
    ports:
      - "8082:8080"
    depends_on:
      - redis
      - kafka
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  redis:
    image: redis:7.4.0-bookworm
    ports:
      - "6379:6379"
    networks:
      - my_network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - LOG_LEVEL=warn

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_ROOT_LOGLEVEL: 'WARN'
      KAFKA_LOG4J_LOGGERS: 'kafka=WARN,kafka.controller=WARN,kafka.log.LogCleaner=WARN,state.change.logger=WARN,kafka.producer.async.DefaultEventHandler=WARN'
      KAFKA_TOOLS_LOG4J_LOGLEVEL: ERROR
      KAFKA_CREATE_TOPICS: "grid_updates:2:1"
      LOG_LEVEL: warn
    networks:
      - my_network
    healthcheck:
      test: ["CMD", "kafka-topics", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: error  # Added this line to set log level to error

    networks:
      - my_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "9222:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - LOGGING_LEVEL_ROOT=warn
      - LOGGING_LEVEL_COM_PROVECTUS=warn
    depends_on:
      - kafka
      - zookeeper
    networks:
      - my_network

networks:
  my_network:
    name: custom_network

volumes:
  redis_data: